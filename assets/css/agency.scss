---
---
@charset "utf-8";

// 1. Core variables and mixins (these need to be available for both Bootstrap overrides and your custom styles)
@import "base/_variables";
@import "base/custom_utilities"; // If these utilities might be used by Bootstrap overrides or your base, keep them early
@import "base/mixins.scss";

// 2. Import Bootstrap (or any other third-party CSS frameworks)
@import "bootstrap.min.css"; // Import Bootstrap styles FIRST

// 3. Custom color definitions and functions (can come after variables but before your components/layout that use them)
//    Your custom color variables ($primary, $secondary, etc.) are defined here in your file,
//    which is fine if they are intended to override Bootstrap's default theme colors *if Bootstrap SCSS variables were being used*.
//    However, since you're importing compiled bootstrap.min.css, these $primary variables won't directly affect Bootstrap's compiled classes
//    unless Bootstrap's CSS uses CSS variables (which v4.3.1 does to some extent with :root variables like --blue, --primary).
//    Your custom classes (e.g., .btn-primary that *you define*) will use these.

@function custom-lighten($color, $amount) {
  // Extract the RGB values from the color
  $red: red($color);
  $green: green($color);
  $blue: blue($color);

  // Lighten the color by adjusting its brightness
  $lightened-color: rgb($red + $amount, $green + $amount, $blue + $amount);

  @return $lightened-color;
}

@function custom-opacity($color, $opacity) {
  @if $opacity < 0 or $opacity > 1 {
    @warn "Opacity value should be between 0 and 1. Using 1 as the default.";
    $opacity: 1; // Default opacity if an invalid value is provided
  }

  @return rgba($color, $opacity);
}


// Custom colors
$primary: {{ site.data.style.primary | default: "#E16473" }} !default;
$lightened-primary: custom-lighten($primary, 30);
$secondary: {{ site.data.style.secondary | default: "#fff" }} !default;
$lightened-secondary: custom-opacity($secondary, 0.2);
$action: {{ site.data.style.action | default: "#fff" }} !default;
$white: {{ site.data.style.white | default: "#fff" }} !default;
$black: {{ site.data.style.black | default: "#000000" }} !default;

// Custom Images
$header-image: "/assets/img/masthead.avif";
$contact-image: "{{ site.data.style.contact-image }}";

// 4. Your custom base styles, components, and layout files
// These will now correctly override or extend Bootstrap's styles.
@import "base/page.scss"; // Your base typography, page defaults

// Custom Fonts (Sass mixin definitions - order here is less critical as long as they are defined before use)
{% if site.data.style.fonts %}
  {% for font in site.data.style.fonts %}
    @mixin {{font.for}}-font {
      font-family: "{{ font.name }}", -apple-system, BlinkMacSystemFont, "Segoe UI",
      Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
      font-display: swap
    }
  {% endfor %}
{% endif %}

// Components
@import "components/buttons.scss";
@import "components/navbar.scss";
@import "components/client-scroll.scss";
@import "components/_blog-filter.scss";

// Layout
@import "layout/masthead.scss";
@import "layout/services.scss";
@import "layout/training.scss";
@import "layout/portfolio.scss";
@import "layout/timeline.scss";
@import "layout/team.scss";
@import "layout/contact.scss";
@import "layout/footer.scss";
@import "layout/_testimonial.scss";
@import "layout/_about.scss";
@import "layout/_mini_masthead.scss";
@import "layout/_blog.scss";
@import "layout/_services-page.scss"; // Import the new services page styles
@import "layout/_contact-page.scss";

